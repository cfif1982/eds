// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc1
// source: eds.proto

package edsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EDS_AddNewDocument_FullMethodName  = "/eds.EDS/AddNewDocument"
	EDS_GetDocumentByID_FullMethodName = "/eds.EDS/GetDocumentByID"
	EDS_SendDocument_FullMethodName    = "/eds.EDS/SendDocument"
	EDS_SignDocument_FullMethodName    = "/eds.EDS/SignDocument"
)

// EDSClient is the client API for EDS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EDSClient interface {
	AddNewDocument(ctx context.Context, in *AddNewDocumentRequest, opts ...grpc.CallOption) (*AddNewDocumentResponse, error)
	GetDocumentByID(ctx context.Context, in *GetDocumentByIDRequest, opts ...grpc.CallOption) (*GetDocumentByIDResponse, error)
	SendDocument(ctx context.Context, in *SendDocumentRequest, opts ...grpc.CallOption) (*SendDocumentResponse, error)
	SignDocument(ctx context.Context, in *SignDocumentRequest, opts ...grpc.CallOption) (*SignDocumentResponse, error)
}

type eDSClient struct {
	cc grpc.ClientConnInterface
}

func NewEDSClient(cc grpc.ClientConnInterface) EDSClient {
	return &eDSClient{cc}
}

func (c *eDSClient) AddNewDocument(ctx context.Context, in *AddNewDocumentRequest, opts ...grpc.CallOption) (*AddNewDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddNewDocumentResponse)
	err := c.cc.Invoke(ctx, EDS_AddNewDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eDSClient) GetDocumentByID(ctx context.Context, in *GetDocumentByIDRequest, opts ...grpc.CallOption) (*GetDocumentByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocumentByIDResponse)
	err := c.cc.Invoke(ctx, EDS_GetDocumentByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eDSClient) SendDocument(ctx context.Context, in *SendDocumentRequest, opts ...grpc.CallOption) (*SendDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendDocumentResponse)
	err := c.cc.Invoke(ctx, EDS_SendDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eDSClient) SignDocument(ctx context.Context, in *SignDocumentRequest, opts ...grpc.CallOption) (*SignDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignDocumentResponse)
	err := c.cc.Invoke(ctx, EDS_SignDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EDSServer is the server API for EDS service.
// All implementations must embed UnimplementedEDSServer
// for forward compatibility.
type EDSServer interface {
	AddNewDocument(context.Context, *AddNewDocumentRequest) (*AddNewDocumentResponse, error)
	GetDocumentByID(context.Context, *GetDocumentByIDRequest) (*GetDocumentByIDResponse, error)
	SendDocument(context.Context, *SendDocumentRequest) (*SendDocumentResponse, error)
	SignDocument(context.Context, *SignDocumentRequest) (*SignDocumentResponse, error)
	mustEmbedUnimplementedEDSServer()
}

// UnimplementedEDSServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEDSServer struct{}

func (UnimplementedEDSServer) AddNewDocument(context.Context, *AddNewDocumentRequest) (*AddNewDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewDocument not implemented")
}
func (UnimplementedEDSServer) GetDocumentByID(context.Context, *GetDocumentByIDRequest) (*GetDocumentByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentByID not implemented")
}
func (UnimplementedEDSServer) SendDocument(context.Context, *SendDocumentRequest) (*SendDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDocument not implemented")
}
func (UnimplementedEDSServer) SignDocument(context.Context, *SignDocumentRequest) (*SignDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignDocument not implemented")
}
func (UnimplementedEDSServer) mustEmbedUnimplementedEDSServer() {}
func (UnimplementedEDSServer) testEmbeddedByValue()             {}

// UnsafeEDSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EDSServer will
// result in compilation errors.
type UnsafeEDSServer interface {
	mustEmbedUnimplementedEDSServer()
}

func RegisterEDSServer(s grpc.ServiceRegistrar, srv EDSServer) {
	// If the following call pancis, it indicates UnimplementedEDSServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EDS_ServiceDesc, srv)
}

func _EDS_AddNewDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EDSServer).AddNewDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EDS_AddNewDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EDSServer).AddNewDocument(ctx, req.(*AddNewDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EDS_GetDocumentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EDSServer).GetDocumentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EDS_GetDocumentByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EDSServer).GetDocumentByID(ctx, req.(*GetDocumentByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EDS_SendDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EDSServer).SendDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EDS_SendDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EDSServer).SendDocument(ctx, req.(*SendDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EDS_SignDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EDSServer).SignDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EDS_SignDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EDSServer).SignDocument(ctx, req.(*SignDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EDS_ServiceDesc is the grpc.ServiceDesc for EDS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EDS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eds.EDS",
	HandlerType: (*EDSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNewDocument",
			Handler:    _EDS_AddNewDocument_Handler,
		},
		{
			MethodName: "GetDocumentByID",
			Handler:    _EDS_GetDocumentByID_Handler,
		},
		{
			MethodName: "SendDocument",
			Handler:    _EDS_SendDocument_Handler,
		},
		{
			MethodName: "SignDocument",
			Handler:    _EDS_SignDocument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eds.proto",
}
